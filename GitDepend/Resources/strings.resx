<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CHECKING_OUT_BRANCH_ON_REPONAME">
    <value>Checking out the {0} branch on {1}</value>
  </data>
  <data name="CLONED_ALL_DEPS" xml:space="preserve">
    <value>Successfully cloned all dependencies</value>
  </data>
  <data name="CLONING_DEP_INTO_DIRECTORY" xml:space="preserve">
    <value>Cloning {0} into {1}</value>
  </data>
  <data name="CONFIG_UPDATED" xml:space="preserve">
    <value>Config updated successfully</value>
  </data>
  <data name="CREATING_BRANCH_ON_REPONAME">
    <value>Creating the {0} branch on {1}</value>
  </data>
  <data name="DEPENDENCY" xml:space="preserve">
    <value>dependency:</value>
  </data>
  <data name="DEPENDENCY_ADDED_SUCCESFULLY" xml:space="preserve">
    <value>Dependency with dir {0} has been added successfully.</value>
  </data>
  <data name="DEPS_CORRECT_BRANCH" xml:space="preserve">
    <value>All dependencies on the correct branch</value>
  </data>
  <data name="DIRECTORY" xml:space="preserve">
    <value>    dir: </value>
  </data>
  <data name="EXPECTED_BRANCH_BUT_WAS_BRANCH" xml:space="preserve">
    <value>    expected {0} but was {1}</value>
  </data>
  <data name="GIVE_UP_OPTION" xml:space="preserve">
    <value>3. Give up. I'll figure it out myself.</value>
  </data>
  <data name="INVALID_BRANCH" xml:space="preserve">
    <value>Invalid Branch!</value>
  </data>
  <data name="LOOKS_GOOD" xml:space="preserve">
    <value>everything looks good.</value>
  </data>
  <data name="MAKING_UPDATE_COMMIT_ON" xml:space="preserve">
    <value>Making update commit on </value>
  </data>
  <data name="NAME" xml:space="preserve">
    <value>    name: </value>
  </data>
  <data name="PACKAGES_UP_TO_DATE" xml:space="preserve">
    <value>All packages are up to date</value>
  </data>
  <data name="NOT_ALL_DEPS_CORRECT_BRANCH" xml:space="preserve">
    <value>Not all dependencies are on the correct branch.</value>
  </data>
  <data name="NOTHING_UPDATED" xml:space="preserve">
    <value>nothing was updated</value>
  </data>
  <data name="PROJECT" xml:space="preserve">
    <value>project:</value>
  </data>
  <data name="RET_BUILD_SCRIPT_FAILED" xml:space="preserve">
    <value>The build script failed</value>
  </data>
  <data name="RET_CREATE_CACHE_DIR_FAILED" xml:space="preserve">
    <value>Failed to create the nuget cache directory</value>
  </data>
  <data name="RET_DIRECTORY_DOES_NOT_EXIST" xml:space="preserve">
    <value>Directory does not exist</value>
  </data>
  <data name="RET_GIT_COMMAND_FAILED" xml:space="preserve">
    <value>Failed to execute the git command</value>
  </data>
  <data name="RET_GIT_REPO_NOT_FOUND" xml:space="preserve">
    <value>This is not a git repository</value>
  </data>
  <data name="RET_INVALID_ARGS" xml:space="preserve">
    <value>Invalid Arguments</value>
  </data>
  <data name="RET_INVALID_BRANCH_CHECKED_OUT" xml:space="preserve">
    <value>Invalid branch checked out</value>
  </data>
  <data name="RET_INVALID_COMMAND" xml:space="preserve">
    <value>Invalid Command</value>
  </data>
  <data name="RET_INVALID_URI_FORMAT" xml:space="preserve">
    <value>Invalid Uri format</value>
  </data>
  <data name="RET_MISSING_DEPENDENCY" xml:space="preserve">
    <value>Missing Dependency</value>
  </data>
  <data name="RET_NAME_DID_NOT_MATCH" xml:space="preserve">
    <value>Name did not match</value>
  </data>
  <data name="RET_NUGET_COMMAND_FAILED" xml:space="preserve">
    <value>Failed to execute a nuget command</value>
  </data>
  <data name="RET_SUCCESS" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="RET_UNKNOWN_ERROR" xml:space="preserve">
    <value>Unknown Error</value>
  </data>
  <data name="SUCCESFULLY_CREATED_BRANCH_ALL_REPOS" xml:space="preserve">
    <value>Successfully created the {0} branch in all repositories.</value>
  </data>
  <data name="SUCCESFULLY_DELETED_BRANCH_ALL_REPOS" xml:space="preserve">
    <value>Successfully deleted the {0} branch in all repositories.</value>
  </data>
  <data name="SWITCH_BRANCH_OPTION" xml:space="preserve">
    <value>2. Switch branch to </value>
  </data>
  <data name="SYNC_SUCCESS" xml:space="preserve">
    <value>all dependency branches synchronized successfully!</value>
  </data>
  <data name="TRY_AGAIN" xml:space="preserve">
    <value>Huh? Try again.</value>
  </data>
  <data name="UPDATE_COMPLETE" xml:space="preserve">
    <value>Update complete!</value>
  </data>
  <data name="UPDATE_CONFIG" xml:space="preserve">
    <value>1. Update config to point to </value>
  </data>
  <data name="UPDATED_PACKAGES" xml:space="preserve">
    <value>Updated packages: </value>
  </data>
  <data name="USING_BRANCH_FOR_CONFIG" xml:space="preserve">
    <value>using {0} for {1}</value>
  </data>
  <data name="VERIFYING_CHECKED_OUT_BRANCH" xml:space="preserve">
    <value>Verifying the checked out branch</value>
  </data>
  <data name="WHAT_SHOULD_I_DO" xml:space="preserve">
    <value>What should I do?</value>
  </data>
</root>